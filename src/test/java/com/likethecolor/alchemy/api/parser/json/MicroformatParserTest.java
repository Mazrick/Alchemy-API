/**
 * File: MicroformatParserTest.java
 *
 * Copyright 2012 Dan Brown <dan@likethecolor.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.likethecolor.alchemy.api.parser.json;

import com.likethecolor.alchemy.api.entity.MicroformatAlchemyEntity;
import com.likethecolor.alchemy.api.entity.Response;
import org.junit.Test;

import java.util.Iterator;

import static org.junit.Assert.*;

public class MicroformatParserTest {
  private static final String LANGUAGE = "english";
  private static final String STATUS_STRING = "OK";
  private static final String TEXT = "this is some text";
  private static final String USAGE = "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html";
  private static final String URL = "http://www.bartleby.com/124/pres32.html";

  @Test
  public void testParser() {
    final MicroformatParser parser = new MicroformatParser();
    final Response<MicroformatAlchemyEntity> response = parser.parse(getJsonString());

    assertEquals(7, response.size());

    MicroformatAlchemyEntity entity;
    final Iterator<MicroformatAlchemyEntity> iter = response.iterator();

    entity = iter.next();
    assertEquals("RelTagLink", entity.getData());
    assertEquals("/wiki/Category:Specifications", entity.getField());

    entity = iter.next();
    assertEquals("RelTag", entity.getData());
    assertEquals("Category:Specifications", entity.getField());

    entity = iter.next();
    assertEquals("NameGivenName", entity.getData());
    assertEquals("Tantek", entity.getField());

    entity = iter.next();
    assertEquals("NameFamilyName", entity.getData());
    assertEquals("Çelik", entity.getField());

    entity = iter.next();
    assertEquals("FormattedName", entity.getData());
    assertEquals("Tantek Çelik", entity.getField());

    entity = iter.next();
    assertEquals("Role", entity.getData());
    assertEquals("Editor", entity.getField());

    entity = iter.next();
    assertEquals("Role", entity.getData());
    assertEquals("Author", entity.getField());
  }

  @Test
  public void testParser_NoMicroformats() {
    final MicroformatParser parser = new MicroformatParser();
    final Response<MicroformatAlchemyEntity> response = parser.parse(getJsonString_NoAuthor());

    assertEquals(0, response.size());
  }

  /**
   * Has both category and score.
   */
  private String getJsonString() {
    return "{" +
           "\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\":\"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\":\"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\":\"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\":\"" + TEXT + "\"," +
           "\"" + JSONConstants.MICROFORMATS_KEY + "\":" +
           "[" +
           "{" +
           "\"" + JSONConstants.MICROFORMATS_DATA_KEY + "\": \"RelTagLink\"," +
           "\"" + JSONConstants.MICROFORMATS_FIELD_KEY + "\": \"/wiki/Category:Specifications\"" +
           "}," +
           "{" +
           "\"" + JSONConstants.MICROFORMATS_DATA_KEY + "\": \"RelTag\"," +
           "\"" + JSONConstants.MICROFORMATS_FIELD_KEY + "\": \"Category:Specifications\"" +
           "}," +
           "{" +
           "\"" + JSONConstants.MICROFORMATS_DATA_KEY + "\": \"NameGivenName\"," +
           "\"" + JSONConstants.MICROFORMATS_FIELD_KEY + "\": \"Tantek\"" +
           "}," +
           "{" +
           "\"" + JSONConstants.MICROFORMATS_DATA_KEY + "\": \"NameFamilyName\"," +
           "\"" + JSONConstants.MICROFORMATS_FIELD_KEY + "\": \"\u00C7elik\"" +
           "}," +
           "{" +
           "\"" + JSONConstants.MICROFORMATS_DATA_KEY + "\": \"FormattedName\"," +
           "\"" + JSONConstants.MICROFORMATS_FIELD_KEY + "\": \"Tantek \u00C7elik\"" +
           "}," +
           "{" +
           "\"" + JSONConstants.MICROFORMATS_DATA_KEY + "\": \"Role\"," +
           "\"" + JSONConstants.MICROFORMATS_FIELD_KEY + "\": \"Editor\"" +
           "}," +
           "{" +
           "\"" + JSONConstants.MICROFORMATS_DATA_KEY + "\": \"Role\"," +
           "\"" + JSONConstants.MICROFORMATS_FIELD_KEY + "\": \"Author\"" +
           "}" +
           "]" +
           "}";
  }

  /**
   * JSON with no author
   */
  private String getJsonString_NoAuthor() {
    return "{" +
           "\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\":\"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\":\"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\":\"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\":\"" + TEXT + "\"" +
           "}";
  }
}
