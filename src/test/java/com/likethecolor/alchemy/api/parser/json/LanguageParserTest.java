/**
 * File: LanguageParserTest.java
 *
 * Copyright 2012 Dan Brown <dan@likethecolor.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.likethecolor.alchemy.api.parser.json;

import com.likethecolor.alchemy.api.entity.LanguageAlchemyEntity;
import com.likethecolor.alchemy.api.entity.Response;
import org.junit.Test;

import java.util.Iterator;

import static org.junit.Assert.*;

public class LanguageParserTest {
  private static final String LANGUAGE = "english";
  private static final String STATUS_STRING = "OK";
  private static final String USAGE = "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html";
  private static final String URL = "http://www.bartleby.com/124/pres32.html";
  private static final String ISO6391 = "en";
  private static final String ISO6392 = "eng";
  private static final String ISO6393 = "eng";
  private static final String ETHNOLOGUE = "http://www.ethnologue.com/show_language.asp?code=eng";
  public static final int MINIMUM_NUMBER_OF_NATIVE_SPEAKERS = 309000000;
  public static final int MAXIMUM_NUMBER_OF_NATIVE_SPEAKERS = 400000000;
  private static final String NUMBER_OF_NATIVE_SPEAKERS = "309-400 million";
  private static final String WIKIPEDIA = "http://en.wikipedia.org/wiki/English_language";

  @Test
  public void testParse() {
    final AbstractParser<LanguageAlchemyEntity> parser = new LanguageParser();
    final Response<LanguageAlchemyEntity> response = parser.parse(getJsonString());

    assertEquals(1, response.size());

    final Iterator<LanguageAlchemyEntity> iter = response.iterator();
    final LanguageAlchemyEntity entity = iter.next();

    assertEquals(ETHNOLOGUE, entity.getEthnologue());
    assertEquals(LANGUAGE, entity.getLanguage());
    assertEquals(ISO6391, entity.getIso6391());
    assertEquals(ISO6392, entity.getIso6392());
    assertEquals(ISO6393, entity.getIso6393());
    assertEquals(NUMBER_OF_NATIVE_SPEAKERS, entity.getNumberOfNativeSpeakers());
    assertEquals(MINIMUM_NUMBER_OF_NATIVE_SPEAKERS, entity.getMinimumNumberOfNativeSpeakers());
    assertEquals(MAXIMUM_NUMBER_OF_NATIVE_SPEAKERS, entity.getMaximumNumberOfNativeSpeakers());
    assertEquals(WIKIPEDIA, entity.getWikipedia());
  }

  @Test
  public void testParse_NoValueForLanguage() {
    final AbstractParser<LanguageAlchemyEntity> parser = new LanguageParser();
    final Response<LanguageAlchemyEntity> response = parser.parse(getJsonString_NoLanguage());

    assertEquals(0, response.size());
  }

  private String getJsonString() {
    return "{"
           + "status: \"" + STATUS_STRING + "\","
           + "usage: \"" + USAGE + "\","
           + "url: \"" + URL + "\","
           + "language: \"" + LANGUAGE + "\","
           + "iso-639-1: \"" + ISO6391 + "\","
           + "iso-639-2: \"" + ISO6392 + "\","
           + "iso-639-3: \"" + ISO6393 + "\","
           + "ethnologue: \"" + ETHNOLOGUE + "\","
           + "native-speakers: \"" + NUMBER_OF_NATIVE_SPEAKERS + "\","
           + "wikipedia: \"" + WIKIPEDIA + "\""
           + "}";
  }

  private String getJsonString_NoLanguage() {
    return "{"
           + "status: \"" + STATUS_STRING + "\","
           + "usage: \"" + USAGE + "\","
           + "url: \"" + URL + "\","
           + "iso-639-1: \"" + ISO6391 + "\","
           + "iso-639-2: \"" + ISO6392 + "\","
           + "iso-639-3: \"" + ISO6393 + "\","
           + "ethnologue: \"" + ETHNOLOGUE + "\","
           + "native-speakers: \"" + NUMBER_OF_NATIVE_SPEAKERS + "\","
           + "wikipedia: \"" + WIKIPEDIA + "\""
           + "}";
  }
}
