/**
 * File: RelationsParserTest.java
 *
 * Copyright 2012 Dan Brown <dan@likethecolor.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.likethecolor.alchemy.api.parser.json;

import com.likethecolor.alchemy.api.Constants;
import com.likethecolor.alchemy.api.entity.AlchemyAction;
import com.likethecolor.alchemy.api.entity.AlchemyEntity;
import com.likethecolor.alchemy.api.entity.AlchemyObject;
import com.likethecolor.alchemy.api.entity.AlchemySubject;
import com.likethecolor.alchemy.api.entity.AlchemyVerb;
import com.likethecolor.alchemy.api.entity.RelationAlchemyEntity;
import com.likethecolor.alchemy.api.entity.Response;
import com.likethecolor.alchemy.api.entity.SentimentAlchemyEntity;
import org.junit.Test;

import java.util.Iterator;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

public class RelationsParserTest {
  private static final String LANGUAGE = "english";
  private static final String STATUS_STRING = "OK";
  private static final String TEXT = "this is some text";
  private static final String USAGE = "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html";
  private static final String URL = "http://www.bartleby.com/124/pres32.html";

  @Test
  public void testParse() {
    Response<RelationAlchemyEntity> response = new RelationsParser().parse(getJson());

    assertEquals(2, response.size());

    RelationAlchemyEntity relationAlchemyEntity;
    AlchemySubject subject;
    AlchemyEntity entity;
    SentimentAlchemyEntity sentiment;
    AlchemyAction action;
    AlchemyVerb verb;
    AlchemyObject object;
    final Iterator<RelationAlchemyEntity> iter = response.iterator();

    relationAlchemyEntity = iter.next();
    subject = relationAlchemyEntity.getSubject();
    assertEquals("CNN", subject.getText());

    sentiment = subject.getSentiment();
    assertFalse(sentiment.isMixed());
    assertEquals(new Double(-0.48412D), sentiment.getScore());
    assertEquals(SentimentAlchemyEntity.TYPE.NEGATIVE, sentiment.getType());

    entity = subject.getEntity();
    assertEquals("CNN", entity.getText());
    assertEquals("Company", entity.getType());
    assertEquals("http://census.gov/resource/CNN", entity.getCensus());
    assertEquals("http://ciafactbook.com/resource/CNN", entity.getCIAFactbook());
    assertEquals("http://crunchbase.com/resource/CNN", entity.getCrunchbase());
    assertEquals("http://dbpedia.org/resource/CNN", entity.getDBPedia());
    assertEquals("http://rdf.freebase.com/ns/guid.9202a8c04000641f80000000000761d7", entity.getFreebase());
    assertEquals("32.1231 23.4543", entity.getGeo());
    assertEquals(new Double(32.1231D), entity.getLatitude());
    assertEquals(new Double(23.4543D), entity.getLongitude());
    assertEquals("http://geonames.org/resource/CNN", entity.getGeonames());
    assertEquals("http://www.musicbrainz.com/resource/CNN", entity.getMusicBrainz());
    assertEquals("CNN", entity.getName());
    assertEquals("http://opencyc.com/resource/CNN", entity.getOpencyc());
    assertEquals("http://www.semanticcrunchbase.com/resource/CNN", entity.getSemanticCrunchbase());
    assertEquals("http://umbel.org/umbel/ne/wikipedia/CNN", entity.getUmbel());
    assertEquals("http://www.cnn.com/", entity.getWebsite());
    assertEquals("http://mpii.de/yago/resource/CNN", entity.getYago());

    assertEquals(5, entity.getSubtypeSize());
    final Iterator<String> subtypes = entity.subtypeIterator();
    assertEquals("Broadcast", subtypes.next());
    assertEquals("AwardWinner", subtypes.next());
    assertEquals("Company", subtypes.next());
    assertEquals("RadioNetwork", subtypes.next());
    assertEquals("TVNetwork", subtypes.next());

    action = relationAlchemyEntity.getAction();
    assertEquals("have be find", action.getLematized());
    assertEquals("has been found", action.getText());

    verb = action.getVerb();
    assertFalse(verb.isNegated());
    assertEquals(AlchemyVerb.TENSE.PAST, verb.getTense());
    assertEquals("find", verb.getText());

    object = relationAlchemyEntity.getObject();
    assertNull(object);

    relationAlchemyEntity = iter.next();
    subject = relationAlchemyEntity.getSubject();
    assertEquals("Marcus Schrenker", subject.getText());

    sentiment = subject.getSentiment();
    assertTrue(sentiment.isMixed());
    assertEquals(new Double(0.2148D), sentiment.getScore());
    assertEquals(SentimentAlchemyEntity.TYPE.POSITIVE, sentiment.getType());

    entity = subject.getEntity();
    assertEquals("Marcus Schrenker", entity.getText());
    assertEquals("Person", entity.getType());

    assertNull(entity.getCensus());
    assertNull(entity.getCIAFactbook());
    assertNull(entity.getCrunchbase());
    assertNull(entity.getDBPedia());
    assertNull(entity.getFreebase());
    assertNull(entity.getGeo());
    assertEquals(Constants.DEFAULT_LATITUDE, entity.getLatitude());
    assertEquals(Constants.DEFAULT_LONGITUDE, entity.getLongitude());
    assertNull(entity.getGeonames());
    assertNull(entity.getMusicBrainz());
    assertNull(entity.getName());
    assertNull(entity.getOpencyc());
    assertNull(entity.getSemanticCrunchbase());
    assertNull(entity.getUmbel());
    assertNull(entity.getWebsite());
    assertNull(entity.getYago());

    assertEquals(0, entity.getSubtypeSize());

    action = relationAlchemyEntity.getAction();
    assertEquals("be take", action.getLematized());
    assertEquals("was taken", action.getText());

    verb = action.getVerb();
    assertFalse(verb.isNegated());
    assertEquals("take", verb.getText());
    assertEquals(AlchemyVerb.TENSE.PAST, verb.getTense());

    object = relationAlchemyEntity.getObject();
    assertEquals("to a hospital", object.getText());
    assertNull(object.getEntity());

    sentiment = object.getSentiment();
    assertFalse(sentiment.isMixed());
    assertEquals(new Double(0.442392D), sentiment.getScore());
    assertEquals(SentimentAlchemyEntity.TYPE.POSITIVE, sentiment.getType());

    sentiment = object.getSentimentFromSubject();
    assertFalse(sentiment.isMixed());
    assertEquals(new Double(-0.126906D), sentiment.getScore());
    assertEquals(SentimentAlchemyEntity.TYPE.NEGATIVE, sentiment.getType());
  }

  @Test
  public void testParse_NoRelation() {
    Response<RelationAlchemyEntity> response = new RelationsParser().parse(getJsonString_NoRelations());

    assertEquals(0, response.size());
  }

  private String getJson() {
    return "{\""
           + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\","
           + "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\","
           + "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\","
           + "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\","
           + "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\","
           + "\"relations\":"
           + "["
           + "{"
           + "\"subject\":"
           + "{"
           + "\"text\":\"CNN\","
           + "\"sentiment\":"
           + "{"
           + "\"type\":\"negative\","
           + "\"score\":\"-0.48412\","
           + "\"mixed\":\"0\""
           + "},"
           + "\"entity\":"
           + "{"
           + "\"type\":\"Company\","
           + "\"text\":\"CNN\","
           + "\"disambiguated\":"
           + "{"
           + "\"subType\":"
           + "["
           + "\"Broadcast\",\"AwardWinner\",\"Company\",\"RadioNetwork\",\"TVNetwork\""
           + "],"
           + "\"name\":\"CNN\","
           + "\"website\":\"http://www.cnn.com/\","
           + "\"dbpedia\":\"http://dbpedia.org/resource/CNN\","
           + "\"freebase\":\"http://rdf.freebase.com/ns/guid.9202a8c04000641f80000000000761d7\","
           + "\"umbel\":\"http://umbel.org/umbel/ne/wikipedia/CNN\","
           + "\"yago\":\"http://mpii.de/yago/resource/CNN\","
           + "\"geo\":\"32.1231 23.4543\","
           + "\"opencyc\":\"http://opencyc.com/resource/CNN\","
           + "\"ciaFactbook\":\"http://ciafactbook.com/resource/CNN\","
           + "\"census\":\"http://census.gov/resource/CNN\","
           + "\"geonames\":\"http://geonames.org/resource/CNN\","
           + "\"musicBrainz\":\"http://www.musicbrainz.com/resource/CNN\","
           + "\"crunchbase\":\"http://crunchbase.com/resource/CNN\","
           + "\"semanticCrunchbase\":\"http://www.semanticcrunchbase.com/resource/CNN\""
           + "}"
           + "}"
           + "},"
           + "\"action\":"
           + "{"
           + "\"text\":\"has been found\","
           + "\"lemmatized\":\"have be find\","
           + "\"verb\":"
           + "{"
           + "\"text\":\"find\","
           + "\"tense\":\"past\","
           + "\"negated\":\"0\""
           + "}"
           + "}"
           + "},"
           + "{"
           + "\"subject\":"
           + "{"
           + "\"text\":\"Marcus Schrenker\","
           + "\"sentiment\":"
           + "{"
           + "\"type\":\"positive\","
           + "\"score\":\"0.2148\","
           + "\"mixed\":\"1\""
           + "},"
           + "\"entity\":"
           + "{"
           + "\"type\":\"Person\","
           + "\"text\":\"Marcus Schrenker\""
           + "}"
           + "},"
           + "\"action\":"
           + "{"
           + "\"text\":\"was taken\","
           + "\"lemmatized\":\"be take\","
           + "\"verb\":"
           + "{"
           + "\"text\":\"take\","
           + "\"tense\":\"past\""
           + "}"
           + "},"
           + "\"object\":"
           + "{"
           + "\"text\":\"to a hospital\","
           + "\"sentiment\":"
           + "{"
           + "\"type\": \"positive\","
           + "\"score\": \"0.442392\""
           + "},"
           + "\"sentimentFromSubject\":"
           + "{"
           + "\"type\": \"negative\","
           + "\"score\": \"-0.126906\""
           + "}"
           + "}"
           + "}"
           + "]"
           + "}";
  }

  /**
   * JSON with 0 relations
   */
  private String getJsonString_NoRelations() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"}";
  }
}
