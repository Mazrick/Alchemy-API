/**
 * File: ConceptParserTest.java
 *
 * Copyright 2012 Dan Brown <dan@likethecolor.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.likethecolor.alchemy.api.parser.json;

import com.likethecolor.alchemy.api.Constants;
import com.likethecolor.alchemy.api.entity.ConceptAlchemyEntity;
import com.likethecolor.alchemy.api.entity.Response;
import org.junit.Test;

import java.util.Iterator;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class ConceptParserTest {
  private static final String LANGUAGE = "english";
  private static final String STATUS_STRING = "OK";
  private static final String TEXT = "this is some text";
  private static final String USAGE = "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html";
  private static final String URL = "http://www.bartleby.com/124/pres32.html";

  private static final String ENTITY0_CONCEPT = "Slavery";
  private static final Double ENTITY0_SCORE = 0.938707D;

  private static final String ENTITY1_CONCEPT = "Oath of office";
  private static final Double ENTITY1_SCORE = 0.935298D;
  private static final String ENTITY1_DBPEDIA = "http://dbpedia.org/resource/Oath_of_office";
  private static final String ENTITY1_FREEBASE = "http://rdf.freebase.com/ns/guid.9202a8c04000641f800000000002c748";
  private static final String ENTITY1_YAGO = "http://mpii.de/yago/resource/Oath_of_office";

  private static final String ENTITY2_CONCEPT = "United States Capitol";
  private static final Double ENTITY2_SCORE = 0.776661D;
  private static final String ENTITY2_CENSUS = "http://census.org/United_States_Capitol";
  private static final String ENTITY2_CIA_FACTBOOK = "http://ciafactbook.org/United_States_Capitol";
  private static final String ENTITY2_CRUNCHBASE = "http://crunchbase.org/United_States_Capitol";
  private static final String ENTITY2_DBPEDIA = "http://dbpedia.org/resource/Oath_of_office";
  private static final String ENTITY2_FREEBASE = "http://rdf.freebase.com/ns/guid.9202a8c04000641f800000000002c748";
  private static final String ENTITY2_GEO = "38.889722222222225 -77.00888888888889";
  private static final Double ENTITY2_LATITUDE = 38.889722222222225D;
  private static final Double ENTITY2_LONGITUDE = -77.00888888888889D;
  private static final String ENTITY2_GEONAMES = "http://sws.geonames.org/4140827/";
  private static final String ENTITY2_MUSIC_BRAINZ = "http://www.musicbrainz.org/United_States_Capitol/";
  private static final String ENTITY2_OPENCYC = "http://sw.opencyc.org/concept/Mx4rwQr5gpwpEbGdrcN5Y29ycA";
  private static final String ENTITY2_SEMANTIC_CRUNCHBASE = "http://semanticcrunchbase.org/United_States_Capitol";
  private static final String ENTITY2_WEBSITE = "http://united.states.capitol.org/";
  private static final String ENTITY2_YAGO = "http://mpii.de/yago/resource/United_States_Capitol";

  @Test
  public void testParse() {
    final ConceptParser parser = new ConceptParser();
    final Response<ConceptAlchemyEntity> response = parser.parse(getJsonString());

    assertEquals(3, response.size());

    ConceptAlchemyEntity entity;
    final Iterator<ConceptAlchemyEntity> iter = response.iterator();
    entity = iter.next();
    assertEquals(ENTITY0_CONCEPT, entity.getConcept());
    assertEquals(ENTITY0_SCORE, entity.getScore());
    assertNull(entity.getCensus());
    assertNull(entity.getCIAFactbook());
    assertNull(entity.getCrunchbase());
    assertNull(entity.getDBPedia());
    assertNull(entity.getFreebase());
    assertEquals(Constants.DEFAULT_LATITUDE, entity.getLatitude());
    assertEquals(Constants.DEFAULT_LONGITUDE, entity.getLongitude());
    assertNull(entity.getGeonames());
    assertNull(entity.getMusicBrainz());
    assertNull(entity.getOpencyc());
    assertNull(entity.getSemanticCrunchbase());
    assertNull(entity.getWebsite());
    assertNull(entity.getYago());

    entity = iter.next();
    assertEquals(ENTITY1_CONCEPT, entity.getConcept());
    assertEquals(ENTITY1_SCORE, entity.getScore());
    assertNull(entity.getCensus());
    assertNull(entity.getCIAFactbook());
    assertNull(entity.getCrunchbase());
    assertEquals(ENTITY1_DBPEDIA, entity.getDBPedia());
    assertEquals(ENTITY1_FREEBASE, entity.getFreebase());
    assertEquals(Constants.DEFAULT_LATITUDE, entity.getLatitude());
    assertEquals(Constants.DEFAULT_LONGITUDE, entity.getLongitude());
    assertNull(entity.getGeonames());
    assertNull(entity.getMusicBrainz());
    assertNull(entity.getOpencyc());
    assertNull(entity.getSemanticCrunchbase());
    assertNull(entity.getWebsite());
    assertEquals(ENTITY1_YAGO, entity.getYago());

    entity = iter.next();
    assertEquals(ENTITY2_CONCEPT, entity.getConcept());
    assertEquals(ENTITY2_SCORE, entity.getScore());
    assertEquals(ENTITY2_CENSUS, entity.getCensus());
    assertEquals(ENTITY2_CIA_FACTBOOK, entity.getCIAFactbook());
    assertEquals(ENTITY2_CRUNCHBASE, entity.getCrunchbase());
    assertEquals(ENTITY2_DBPEDIA, entity.getDBPedia());
    assertEquals(ENTITY2_FREEBASE, entity.getFreebase());
    assertEquals(ENTITY2_LATITUDE, entity.getLatitude());
    assertEquals(ENTITY2_LONGITUDE, entity.getLongitude());
    assertEquals(ENTITY2_GEONAMES, entity.getGeonames());
    assertEquals(ENTITY2_MUSIC_BRAINZ, entity.getMusicBrainz());
    assertEquals(ENTITY2_OPENCYC, entity.getOpencyc());
    assertEquals(ENTITY2_SEMANTIC_CRUNCHBASE, entity.getSemanticCrunchbase());
    assertEquals(ENTITY2_WEBSITE, entity.getWebsite());
    assertEquals(ENTITY2_YAGO, entity.getYago());
  }

  @Test
  public void testParse_ConceptNoText() {
    final ConceptParser parser = new ConceptParser();
    final Response<ConceptAlchemyEntity> response = parser.parse(getJsonString_ConceptNoText());

    assertEquals(1, response.size());

    ConceptAlchemyEntity entity;
    final Iterator<ConceptAlchemyEntity> iter = response.iterator();
    entity = iter.next();
    assertNull(entity.getConcept());
    assertEquals(ENTITY0_SCORE, entity.getScore());
  }

  @Test
  public void testParse_ConceptNoScore() {
    final ConceptParser parser = new ConceptParser();
    final Response<ConceptAlchemyEntity> response = parser.parse(getJsonString_ConceptNoScore());

    assertEquals(1, response.size());

    ConceptAlchemyEntity entity;
    final Iterator<ConceptAlchemyEntity> iter = response.iterator();
    entity = iter.next();
    assertEquals(ENTITY0_CONCEPT, entity.getConcept());
    assertEquals(Constants.DEFAULT_SCORE, entity.getScore());
  }

  @Test
  public void testParse_NoConcept() {
    final ConceptParser parser = new ConceptParser();
    final Response<ConceptAlchemyEntity> response = parser.parse(getJsonString_NoConcept());

    assertEquals(0, response.size());
  }

  @Test
  public void testParse_NullEmptyJsonString() {
    final ConceptParser parser = new ConceptParser();
    Response<ConceptAlchemyEntity> response = parser.parse(null);

    assertEquals(0, response.size());

    response = parser.parse("");

    assertEquals(0, response.size());

    response = parser.parse("\t  \r\n");

    assertEquals(0, response.size());
  }

  /**
   * Has both concept and score.
   */
  private String getJsonString() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS + "\":[" +

           "{\"" + JSONConstants.RANKED_CONCEPTS_TEXT_KEY + "\": \"" + ENTITY0_CONCEPT + "\",\"" + JSONConstants.RANKED_CONCEPTS_SCORE_KEY + "\":" + ENTITY0_SCORE + "}," +

           "{\"" + JSONConstants.RANKED_CONCEPTS_TEXT_KEY + "\": \"" + ENTITY1_CONCEPT + "\",\"" + JSONConstants.RANKED_CONCEPTS_SCORE_KEY + "\":" + ENTITY1_SCORE + "," +
           "\"" + JSONConstants.RANKED_CONCEPTS_DBPEDIA_KEY + "\": \"" + ENTITY1_DBPEDIA + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_FREEBASE_KEY + "\": \"" + ENTITY1_FREEBASE + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_YAGO_KEY + "\": \"" + ENTITY1_YAGO + "\"}," +

           "{\"" + JSONConstants.RANKED_CONCEPTS_TEXT_KEY + "\": \"" + ENTITY2_CONCEPT + "\",\"" + JSONConstants.RANKED_CONCEPTS_SCORE_KEY + "\":" + ENTITY2_SCORE + "," +
           "\"" + JSONConstants.RANKED_CONCEPTS_CENSUS_KEY + "\": \"" + ENTITY2_CENSUS + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_CIA_FACTBOOK_KEY + "\": \"" + ENTITY2_CIA_FACTBOOK + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_CRUNCHBASE_KEY + "\": \"" + ENTITY2_CRUNCHBASE + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_DBPEDIA_KEY + "\": \"" + ENTITY2_DBPEDIA + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_FREEBASE_KEY + "\": \"" + ENTITY2_FREEBASE + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_GEO_KEY + "\": \"" + ENTITY2_GEO + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_GEONAMES_KEY + "\": \"" + ENTITY2_GEONAMES + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_MUSIC_BRAINZ_KEY + "\":\"" + ENTITY2_MUSIC_BRAINZ + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_OPENCYC_KEY + "\":\"" + ENTITY2_OPENCYC + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_SEMANTIC_CRUNCHBASE_KEY + "\":\"" + ENTITY2_SEMANTIC_CRUNCHBASE + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_WEBSITE_KEY + "\":\"" + ENTITY2_WEBSITE + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS_YAGO_KEY + "\":\"" + ENTITY2_YAGO + "\"}]}";
  }

  /**
   * JSON with 1 concept, no text.
   */
  private String getJsonString_ConceptNoText() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS + "\": [" +
           "{\"" + JSONConstants.RANKED_CONCEPTS_SCORE_KEY + "\": " + ENTITY0_SCORE + "}" +
           "]}";
  }

  /**
   * JSON with 1 concept, no score.
   */
  private String getJsonString_ConceptNoScore() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"," +
           "\"" + JSONConstants.RANKED_CONCEPTS + "\": [" +
           "{\"" + JSONConstants.RANKED_CONCEPTS_TEXT_KEY + "\": \"" + ENTITY0_CONCEPT + "\"}" +
           "]}";
  }

  /**
   * JSON with 0 concepts
   */
  private String getJsonString_NoConcept() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"}";
  }
}
