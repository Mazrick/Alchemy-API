/**
 * File: NamedEntityParserTest.java
 * Original Author: Dan Brown <dan@likethecolor.com>
 * Copyright 2012 Dan Brown <dan@likethecolor.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.likethecolor.alchemy.api.parser.json;

import com.likethecolor.alchemy.api.Constants;
import com.likethecolor.alchemy.api.entity.NamedEntityAlchemyEntity;
import com.likethecolor.alchemy.api.entity.QuotationAlchemyEntity;
import com.likethecolor.alchemy.api.entity.Response;
import com.likethecolor.alchemy.api.entity.SentimentAlchemyEntity;
import org.junit.Test;

import java.util.Iterator;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

public class NamedEntityParserTest {
  private static final String LANGUAGE = "english";
  private static final String STATUS_STRING = "OK";
  private static final String TEXT = "this is some text";
  private static final String USAGE = "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html";
  private static final String URL = "http://www.bartleby.com/124/pres32.html";

  private static final Double ENTITY0_SCORE = 0.875415D;

  private static final Double ENTITY1_LATITUDE = 38.889722222222225D;
  private static final Double ENTITY1_LONGITUDE = -77.00888888888889D;
  private static final Double ENTITY1_SCORE = 0.596432D;

  private static final String ENTITY2_QUOTATION0 = "\"They should have run the complete, original version,\" Finley told ...";
  private static final String ENTITY2_QUOTATION1 = "\"They should have run the complete, original version,\" Finley told Romenesko. \"It's a bit inappropriate to edit out the mild criticism.\"";
  public static final Double ENTITY2_SENTIMENT_SCORE1 = -0.233275D;
  private static final String ENTITY2_QUOTATION2 = "Finley said the link was \"satisfactory,\" but he still wasn't happy with the Romney campaign edits. \"We're not as concerned,\" he said. \"We still would have liked them to say it was excerpts. That's what we do when we edit something down.\"";
  public static final Double ENTITY2_SENTIMENT_SCORE2 = 0.261198D;
  private static final Double ENTITY2_SCORE = 0.557373D;
  private static final String ENTITY2_QUOTATION3 = "\"They should have run the complete, original version,\" Finley told Romenesko. \"It's a bit inappropriate to edit out the mild criticism.\"";

  @Test
  public void testParse() {
    final NamedEntityParser parser = new NamedEntityParser();

    final Response<NamedEntityAlchemyEntity> response = parser.parse(getJsonString());

    assertEquals(3, response.size());

    NamedEntityAlchemyEntity entity;
    SentimentAlchemyEntity sentimentAlchemyEntity0 = new SentimentAlchemyEntity(true, 0.0678182D, SentimentAlchemyEntity.TYPE.POSITIVE.toString());
    SentimentAlchemyEntity sentimentAlchemyEntity1 = new SentimentAlchemyEntity(false, 0.493509D, SentimentAlchemyEntity.TYPE.POSITIVE.toString());
    SentimentAlchemyEntity sentimentAlchemyEntity2 = new SentimentAlchemyEntity(true, 0.290595D, SentimentAlchemyEntity.TYPE.POSITIVE.toString());
    Iterator<NamedEntityAlchemyEntity> iter = response.iterator();
    entity = iter.next();

    assertEquals("Romney", entity.getText());
    assertEquals(ENTITY0_SCORE, entity.getScore());
    assertEquals("Person", entity.getType());
    assertEquals(1, entity.getCount());
    assertNull(entity.getName());
    assertNull(entity.getCensus());
    assertNull(entity.getCIAFactbook());
    assertNull(entity.getCrunchbase());
    assertNull(entity.getDBPedia());
    assertNull(entity.getFreebase());
    assertEquals(Constants.DEFAULT_LATITUDE, entity.getLatitude());
    assertEquals(Constants.DEFAULT_LONGITUDE, entity.getLongitude());
    assertNull(entity.getGeonames());
    assertNull(entity.getMusicBrainz());
    assertNull(entity.getOpencyc());
    assertNull(entity.getSemanticCrunchbase());
    assertEquals(sentimentAlchemyEntity0, entity.getSentiment());
    assertNull(entity.getUmbel());
    assertNull(entity.getWebsite());
    assertNull(entity.getYago());
    assertEquals(0, entity.getSubtypeSize());
    assertEquals(0, entity.getQuotationCount());

    entity = iter.next();

    assertEquals("Mitt Romney", entity.getText());
    assertEquals(ENTITY1_SCORE, entity.getScore());
    assertEquals("Person", entity.getType());
    assertEquals(7, entity.getCount());
    assertEquals("Mitt Romney", entity.getName());
    assertEquals("http://census.gov/resource/Mitt_Romney", entity.getCensus());
    assertEquals("http://ciafactbook.com/resource/Mitt_Romney", entity.getCIAFactbook());
    assertEquals("http://crunchbase.com/resource/Mitt_Romney", entity.getCrunchbase());
    assertEquals("http://dbpedia.org/resource/Mitt_Romney", entity.getDBPedia());
    assertEquals("http://rdf.freebase.com/ns/guid.9202a8c04000641f80000000002387f8", entity.getFreebase());
    assertEquals(ENTITY1_LATITUDE, entity.getLatitude());
    assertEquals(ENTITY1_LONGITUDE, entity.getLongitude());
    assertEquals("38.889722222222225 -77.00888888888889", entity.getGeo());
    assertEquals("http://geonames.com/resource/Mitt_Romney", entity.getGeonames());
    assertEquals("http://musicbrainz.com/resource/Mitt_Romney", entity.getMusicBrainz());
    assertEquals("http://opencyc.com/resource/Mitt_Romney", entity.getOpencyc());
    assertEquals("http://semanticcrunchbase.com/resource/Mitt_Romney", entity.getSemanticCrunchbase());
    assertEquals(sentimentAlchemyEntity1, entity.getSentiment());
    assertEquals("http://umbel.org/umbel/ne/wikipedia/Mitt_Romney", entity.getUmbel());
    assertEquals("http://mittromney.com/Mitt_Romney", entity.getWebsite());
    assertEquals("http://mpii.de/yago/resource/Mitt_Romney", entity.getYago());

    assertEquals(3, entity.getSubtypeSize());
    Iterator<String> subtypes = entity.subtypeIterator();
    assertEquals("Politician", subtypes.next());
    assertEquals("CompanyFounder", subtypes.next());
    assertEquals("TVActor", subtypes.next());
    assertEquals(0, entity.getQuotationCount());

    entity = iter.next();

    assertEquals("Nolan Finley", entity.getText());
    assertEquals(ENTITY2_SCORE, entity.getScore());
    assertEquals("Person", entity.getType());
    assertEquals(8, entity.getCount());
    assertNull(entity.getName());
    assertNull(entity.getCensus());
    assertNull(entity.getCIAFactbook());
    assertNull(entity.getCrunchbase());
    assertNull(entity.getDBPedia());
    assertNull(entity.getFreebase());
    assertEquals(Constants.DEFAULT_LATITUDE, entity.getLatitude());
    assertEquals(Constants.DEFAULT_LONGITUDE, entity.getLongitude());
    assertNull(entity.getGeonames());
    assertNull(entity.getMusicBrainz());
    assertNull(entity.getOpencyc());
    assertNull(entity.getSemanticCrunchbase());
    assertEquals(sentimentAlchemyEntity2, entity.getSentiment());
    assertNull(entity.getUmbel());
    assertNull(entity.getWebsite());
    assertNull(entity.getYago());
    assertEquals(0, entity.getSubtypeSize());
    assertEquals(4, entity.getQuotationCount());

    Iterator<QuotationAlchemyEntity> quotationIter = entity.quotationIterator();
    QuotationAlchemyEntity actualQuotation = quotationIter.next();
    SentimentAlchemyEntity actualSentiment = actualQuotation.getSentiment();

    assertEquals(ENTITY2_QUOTATION0, actualQuotation.getQuotation());
    assertFalse(actualSentiment.isMixed());
    assertEquals(Constants.DEFAULT_SCORE, actualSentiment.getScore());
    assertEquals(SentimentAlchemyEntity.TYPE.NEUTRAL, actualSentiment.getType());

    actualQuotation = quotationIter.next();
    actualSentiment = actualQuotation.getSentiment();

    assertEquals(ENTITY2_QUOTATION1, actualQuotation.getQuotation());
    assertTrue(actualSentiment.isMixed());
    assertEquals(ENTITY2_SENTIMENT_SCORE1, actualSentiment.getScore());
    assertEquals(SentimentAlchemyEntity.TYPE.NEGATIVE, actualSentiment.getType());

    actualQuotation = quotationIter.next();
    actualSentiment = actualQuotation.getSentiment();

    assertEquals(ENTITY2_QUOTATION2, actualQuotation.getQuotation());
    assertFalse(actualSentiment.isMixed());
    assertEquals(ENTITY2_SENTIMENT_SCORE2, actualSentiment.getScore());
    assertEquals(SentimentAlchemyEntity.TYPE.POSITIVE, actualSentiment.getType());

    actualQuotation = quotationIter.next();
    actualSentiment = actualQuotation.getSentiment();

    assertEquals(ENTITY2_QUOTATION3, actualQuotation.getQuotation());
    assertNull(actualSentiment);
  }

  @Test
  public void testParse_NoNamedEntity() {
    final NamedEntityParser parser = new NamedEntityParser();
    final Response<NamedEntityAlchemyEntity> response = parser.parse(getJsonString_NoNamedEntity());

    assertEquals(0, response.size());
  }

  @Test
  public void testParse_NullEmptyJsonString() {
    final NamedEntityParser parser = new NamedEntityParser();
    Response<NamedEntityAlchemyEntity> response = parser.parse(null);

    assertEquals(0, response.size());

    response = parser.parse("");

    assertEquals(0, response.size());

    response = parser.parse("\t  \r\n");

    assertEquals(0, response.size());
  }

  private String getJsonString() {
    return "{"
           + "\"status\":\"OK\","
           + "\"usage\":\"By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http:\\/\\/www.alchemyapi.com\\/company\\/terms.html\","
           + "\"url\":\"http:\\/\\/www.politico.com\\/blogs\\/media\\/2012\\/02\\/detroit-news-ed-upset-over-romney-edit-115247.html\","
           + "\"language\":\"english\","
           + "\"entities\":["
           + "{"
           + "\"type\":\"Person\","
           + "\"relevance\":\"0.875415\","
           + "\"sentiment\":{\"type\":\"positive\",\"score\":\"0.0678182\",\"mixed\":\"1\"},"
           + "\"count\":\"1\","
           + "\"text\":\"Romney\""
           + "},"
           + "{"
           + "\"type\":\"Person\","
           + "\"relevance\":\"0.596432\","
           + "\"sentiment\":{\"type\":\"positive\",\"score\":\"0.493509\"},"
           + "\"count\":\"7\","
           + "\"text\":\"Mitt Romney\","
           + "\"disambiguated\":{"
           + "\"subType\":[\"Politician\",\"CompanyFounder\",\"TVActor\"],"
           + "\"name\":\"Mitt Romney\","
           + "\"census\":\"http:\\/\\/census.gov\\/resource\\/Mitt_Romney\","
           + "\"ciaFactbook\":\"http:\\/\\/ciafactbook.com\\/resource\\/Mitt_Romney\","
           + "\"crunchbase\":\"http:\\/\\/crunchbase.com\\/resource\\/Mitt_Romney\","
           + "\"dbpedia\":\"http:\\/\\/dbpedia.org\\/resource\\/Mitt_Romney\","
           + "\"freebase\":\"http:\\/\\/rdf.freebase.com\\/ns\\/guid.9202a8c04000641f80000000002387f8\","
           + "\"geo\":\"38.889722222222225 -77.00888888888889\","
           + "\"geonames\":\"http:\\/\\/geonames.com\\/resource\\/Mitt_Romney\","
           + "\"musicBrainz\":\"http:\\/\\/musicbrainz.com\\/resource\\/Mitt_Romney\","
           + "\"opencyc\":\"http:\\/\\/opencyc.com\\/resource\\/Mitt_Romney\","
           + "\"semanticCrunchbase\":\"http:\\/\\/semanticcrunchbase.com\\/resource\\/Mitt_Romney\","
           + "\"umbel\":\"http:\\/\\/umbel.org\\/umbel\\/ne\\/wikipedia\\/Mitt_Romney\","
           + "\"website\":\"http:\\/\\/mittromney.com\\/Mitt_Romney\","
           + "\"yago\":\"http:\\/\\/mpii.de\\/yago\\/resource\\/Mitt_Romney\""
           + "}"
           + "},"
           + "{\"type\":\"Person\","
           + "\"relevance\":\"0.557373\","
           + "\"sentiment\":{\"type\":\"positive\",\"score\":\"0.290595\",\"mixed\":\"1\"},"
           + "\"count\":\"8\","
           + "\"text\":\"Nolan Finley\","
           + "\"quotations\":["
           + "{"
           + "\"quotation\":\"\\\"They should have run the complete, original version,\\\" Finley told ...\",\"sentiment\":{\"type\":\"neutral\"}"
           + "},"
           + "{"
           + "\"quotation\":\"\\\"They should have run the complete, original version,\\\" Finley told Romenesko. \\\"It's a bit inappropriate to edit out the mild criticism.\\\"\","
           + "\"sentiment\":{\"type\":\"negative\",\"score\":\"-0.233275\",\"mixed\":\"1\"}"
           + "},"
           + "{"
           + "\"quotation\":\"Finley said the link was \\\"satisfactory,\\\" but he still wasn't happy with the Romney campaign edits. \\\"We're not as concerned,\\\" he said. \\\"We still would have liked them to say it was excerpts. That's what we do when we edit something down.\\\"\","
           + "\"sentiment\":{\"type\":\"positive\",\"score\":\"0.261198\"}"
           + "},"
           + "{"
           + "\"quotation\":\"\\\"They should have run the complete, original version,\\\" Finley told Romenesko. \\\"It's a bit inappropriate to edit out the mild criticism.\\\"\""
           + "}"
           + "]"
           + "}"
           + "]}";
  }

  /**
   * JSON with 0 concepts
   */
  private String getJsonString_NoNamedEntity() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"}";
  }
}
