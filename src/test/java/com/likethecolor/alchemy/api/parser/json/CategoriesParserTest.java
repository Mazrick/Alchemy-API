/**
 * File: CategoriesParserTest.java
 *
 * Copyright 2012 Dan Brown <dan@likethecolor.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.likethecolor.alchemy.api.parser.json;

import com.likethecolor.alchemy.api.Constants;
import com.likethecolor.alchemy.api.entity.CategoryAlchemyEntity;
import com.likethecolor.alchemy.api.entity.Response;
import org.junit.Test;

import java.util.Iterator;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNull;

public class CategoriesParserTest {
  private static final String LANGUAGE = "english";
  private static final String STATUS_STRING = "OK";
  private static final String TEXT = "this is some text";
  private static final String USAGE = "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html";
  private static final String URL = "http://www.bartleby.com/124/pres32.html";

  private static final String ENTITY0_CATEGORY = "Slavery";
  private static final Double ENTITY0_SCORE = 0.938707D;

  private static final String ENTITY1_CATEGORY = "Oath_of_office";
  private static final Double ENTITY1_SCORE = 0.935298D;

  private static final String ENTITY2_CATEGORY = "Inauguration";
  private static final Double ENTITY2_SCORE = 0.876062D;

  @Test
  public void testParse() {
    final CategoriesParser parser = new CategoriesParser();
    final Response<CategoryAlchemyEntity> response = parser.parse(getJsonString());

    assertEquals(3, response.size());

    CategoryAlchemyEntity entity;
    final Iterator<CategoryAlchemyEntity> iter = response.iterator();
    entity = iter.next();
    assertEquals(ENTITY0_CATEGORY, entity.getCategory());
    assertEquals(ENTITY0_SCORE, entity.getScore());

    entity = iter.next();
    assertEquals(ENTITY1_CATEGORY, entity.getCategory());
    assertEquals(ENTITY1_SCORE, entity.getScore());

    entity = iter.next();
    assertEquals(ENTITY2_CATEGORY, entity.getCategory());
    assertEquals(ENTITY2_SCORE, entity.getScore());
  }

  @Test
  public void testParse_CategoryNoText() {
    final CategoriesParser parser = new CategoriesParser();
    final Response<CategoryAlchemyEntity> response = parser.parse(getJsonString_CategoryNoText());

    assertEquals(1, response.size());

    CategoryAlchemyEntity entity;
    final Iterator<CategoryAlchemyEntity> iter = response.iterator();
    entity = iter.next();
    assertNull(entity.getCategory());
    assertEquals(ENTITY0_SCORE, entity.getScore());
  }

  @Test
  public void testParse_CategoryNoScore() {
    final CategoriesParser parser = new CategoriesParser();
    final Response<CategoryAlchemyEntity> response = parser.parse(getJsonString_CategoryNoScore());

    assertEquals(1, response.size());

    CategoryAlchemyEntity entity;
    final Iterator<CategoryAlchemyEntity> iter = response.iterator();
    entity = iter.next();
    assertEquals(ENTITY0_CATEGORY, entity.getCategory());
    assertEquals(Constants.DEFAULT_SCORE, entity.getScore());
  }

  @Test
  public void testParse_NoCategories() {
    final CategoriesParser parser = new CategoriesParser();
    final Response<CategoryAlchemyEntity> response = parser.parse(getJsonString_NoCategories());

    assertEquals(0, response.size());
  }

  @Test
  public void testParse_NullEmptyJsonString() {
    final CategoryParser parser = new CategoryParser();
    Response<CategoryAlchemyEntity> response = parser.parse(null);

    assertEquals(0, response.size());

    response = parser.parse("");

    assertEquals(0, response.size());

    response = parser.parse("\t  \r\n");

    assertEquals(0, response.size());
  }

  /**
   * Has both category and score.
   */
  private String getJsonString() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"," +
           "\"" + JSONConstants.RANKED_CATEGORIES + "\": [" +
           "{\"" + JSONConstants.RANKED_CATEGORIES_TEXT_KEY + "\": \"" + ENTITY0_CATEGORY + "\",\"" + JSONConstants.RANKED_CATEGORIES_SCORE_KEY + "\": " + ENTITY0_SCORE + "}," +
           "{\"" + JSONConstants.RANKED_CATEGORIES_TEXT_KEY + "\": \"" + ENTITY1_CATEGORY + "\",\"" + JSONConstants.RANKED_CATEGORIES_SCORE_KEY + "\": " + ENTITY1_SCORE + "}," +
           "{\"" + JSONConstants.RANKED_CATEGORIES_TEXT_KEY + "\": \"" + ENTITY2_CATEGORY + "\",\"" + JSONConstants.RANKED_CATEGORIES_SCORE_KEY + "\": " + ENTITY2_SCORE + "}]}";
  }

  /**
   * JSON with 1 category, no text.
   */
  private String getJsonString_CategoryNoText() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"," +
           "\"" + JSONConstants.RANKED_CATEGORIES + "\": [" +
           "{\"" + JSONConstants.RANKED_CATEGORIES_SCORE_KEY + "\": " + ENTITY0_SCORE + "}" +
           "]}";
  }

  /**
   * JSON with 1 category, no score.
   */
  private String getJsonString_CategoryNoScore() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"," +
           "\"" + JSONConstants.RANKED_CATEGORIES + "\": [" +
           "{\"" + JSONConstants.RANKED_CATEGORIES_TEXT_KEY + "\": \"" + ENTITY0_CATEGORY + "\"}" +
           "]}";
  }

  /**
   * JSON with 0 categories
   */
  private String getJsonString_NoCategories() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"}";
  }
}
