/**
 * File: KeywordParserTest.java
 *
 * Copyright 2012 Dan Brown <dan@likethecolor.com>
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.likethecolor.alchemy.api.parser.json;

import com.likethecolor.alchemy.api.Constants;
import com.likethecolor.alchemy.api.entity.KeywordAlchemyEntity;
import com.likethecolor.alchemy.api.entity.Response;
import com.likethecolor.alchemy.api.entity.SentimentAlchemyEntity;
import org.junit.Test;

import java.util.Iterator;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

public class KeywordParserTest {
  private static final String LANGUAGE = "english";
  private static final String STATUS_STRING = "OK";
  private static final String TEXT = "this is some text";
  private static final String USAGE = "By accessing AlchemyAPI or using information generated by AlchemyAPI, you are agreeing to be bound by the AlchemyAPI Terms of Use: http://www.alchemyapi.com/company/terms.html";
  private static final String URL = "http://www.bartleby.com/124/pres32.html";

  private static final String ENTITY0_KEYWORD = "civil war";
  private static final Double ENTITY0_SCORE = 0.920523D;
  private static final String ENTITY0_SENTIMENT_TYPE_STRING = "neutral";
  private static final SentimentAlchemyEntity.TYPE ENTITY0_SENTIMENT_TYPE = SentimentAlchemyEntity.TYPE.NEUTRAL;

  private static final String ENTITY1_KEYWORD = "impending civil war";
  private static final Double ENTITY1_SCORE = 0.753046D;
  private static final String ENTITY1_SENTIMENT_TYPE_STRING = "negative";
  private static final SentimentAlchemyEntity.TYPE ENTITY1_SENTIMENT_TYPE = SentimentAlchemyEntity.TYPE.NEGATIVE;
  private static final Integer ENTITY1_SENTIMENT_MIXED = 1;

  private static final String ENTITY2_KEYWORD = "Justice Salmon Chase";
  private static final Double ENTITY2_SCORE = 0.727785D;
  private static final String ENTITY2_SENTIMENT_TYPE_STRING = "positive";
  private static final SentimentAlchemyEntity.TYPE ENTITY2_SENTIMENT_TYPE = SentimentAlchemyEntity.TYPE.POSITIVE;
  private static final Double ENTITY2_SENTIMENT_SCORE = 0.144226D;

  private static final String ENTITY3_KEYWORD = "Salmon Chase";
  private static final Double ENTITY3_SCORE = 0.716765D;

  @Test
  public void testParse() {
    final KeywordParser parser = new KeywordParser();
    final Response<KeywordAlchemyEntity> response = parser.parse(getJsonString());

    assertEquals(4, response.size());

    KeywordAlchemyEntity entity;
    SentimentAlchemyEntity sentiment;
    final Iterator<KeywordAlchemyEntity> iter = response.iterator();
    entity = iter.next();
    sentiment = entity.getSentiment();
    assertEquals(ENTITY0_KEYWORD, entity.getKeyword());
    assertEquals(ENTITY0_SCORE, entity.getScore());
    assertFalse(sentiment.isMixed());
    assertEquals(Constants.DEFAULT_SCORE, sentiment.getScore());
    assertEquals(ENTITY0_SENTIMENT_TYPE, sentiment.getType());

    entity = iter.next();
    sentiment = entity.getSentiment();
    assertEquals(ENTITY1_KEYWORD, entity.getKeyword());
    assertEquals(ENTITY1_SCORE, entity.getScore());
    assertTrue(sentiment.isMixed());
    assertEquals(Constants.DEFAULT_SCORE, sentiment.getScore());
    assertEquals(ENTITY1_SENTIMENT_TYPE, sentiment.getType());

    entity = iter.next();
    sentiment = entity.getSentiment();
    assertEquals(ENTITY2_KEYWORD, entity.getKeyword());
    assertEquals(ENTITY2_SCORE, entity.getScore());
    assertFalse(sentiment.isMixed());
    assertEquals(ENTITY2_SENTIMENT_TYPE, sentiment.getType());
    assertEquals(ENTITY2_SENTIMENT_SCORE, sentiment.getScore());

    entity = iter.next();
    sentiment = entity.getSentiment();
    assertEquals(ENTITY3_KEYWORD, entity.getKeyword());
    assertEquals(ENTITY3_SCORE, entity.getScore());
    assertNull(sentiment);
  }

  @Test
  public void testParse_OneKeywordNoKeywordText() {
    final KeywordParser parser = new KeywordParser();
    final Response<KeywordAlchemyEntity> response = parser.parse(getJsonString_KeywordNoText());

    assertEquals(1, response.size());

    KeywordAlchemyEntity entity;
    SentimentAlchemyEntity sentiment;
    final Iterator<KeywordAlchemyEntity> iter = response.iterator();
    entity = iter.next();
    sentiment = entity.getSentiment();
    assertNull(entity.getKeyword());
    assertEquals(ENTITY0_SCORE, entity.getScore());
    assertFalse(sentiment.isMixed());
    assertEquals(Constants.DEFAULT_SCORE, sentiment.getScore());
    assertEquals(ENTITY0_SENTIMENT_TYPE, sentiment.getType());
  }

  @Test
  public void testParse_OneKeywordNoScore() {
    final KeywordParser parser = new KeywordParser();
    final Response<KeywordAlchemyEntity> response = parser.parse(getJsonString_KeywordNoScore());

    assertEquals(1, response.size());

    KeywordAlchemyEntity entity;
    SentimentAlchemyEntity sentiment;
    final Iterator<KeywordAlchemyEntity> iter = response.iterator();
    entity = iter.next();
    sentiment = entity.getSentiment();
    assertEquals(ENTITY0_KEYWORD, entity.getKeyword());
    assertEquals(Constants.DEFAULT_SCORE, entity.getScore());
    assertFalse(sentiment.isMixed());
    assertEquals(Constants.DEFAULT_SCORE, sentiment.getScore());
    assertEquals(ENTITY0_SENTIMENT_TYPE, sentiment.getType());
  }


  @Test
  public void testParse_KeywordNoSentiment() {
    final KeywordParser parser = new KeywordParser();
    final Response<KeywordAlchemyEntity> response = parser.parse(getJsonString_KeywordNoSentiment());

    assertEquals(1, response.size());

    KeywordAlchemyEntity entity;
    SentimentAlchemyEntity sentiment;
    final Iterator<KeywordAlchemyEntity> iter = response.iterator();
    entity = iter.next();
    sentiment = entity.getSentiment();
    assertEquals(ENTITY0_KEYWORD, entity.getKeyword());
    assertEquals(ENTITY0_SCORE, entity.getScore());
    assertNull(sentiment);
  }


  @Test
  public void testParse_NoKeywords() {
    final KeywordParser parser = new KeywordParser();
    final Response<KeywordAlchemyEntity> response = parser.parse(getJsonString_NoKeywords());

    assertEquals(0, response.size());
  }


  @Test
  public void testParse_NullEmptyJsonString() {
    final KeywordParser parser = new KeywordParser();
    Response<KeywordAlchemyEntity> response = parser.parse(null);

    assertEquals(0, response.size());

    response = parser.parse("");

    assertEquals(0, response.size());

    response = parser.parse("\t\n  \r\n");

    assertEquals(0, response.size());
  }

  /**
   * JSON with keywords.
   */
  private String getJsonString() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"," +
           "\"" + JSONConstants.RANKED_KEYWORDS + "\": [" +
           "{\"" + JSONConstants.RANKED_KEYWORDS_TEXT_KEY + "\": \"" + ENTITY0_KEYWORD + "\",\"" + JSONConstants.RANKED_KEYWORDS_SCORE_KEY + "\": " + ENTITY0_SCORE + "," +
           "\"" + JSONConstants.SENTIMENT_KEY + "\": {\"" + JSONConstants.SENTIMENT_TYPE_KEY + "\": \"" + ENTITY0_SENTIMENT_TYPE_STRING + "\"}}," +
           "{\"" + JSONConstants.RANKED_KEYWORDS_TEXT_KEY + "\": \"" + ENTITY1_KEYWORD + "\",\"" + JSONConstants.RANKED_KEYWORDS_SCORE_KEY + "\": " + ENTITY1_SCORE + "," +
           "\"" + JSONConstants.SENTIMENT_KEY + "\": {\"" + JSONConstants.SENTIMENT_TYPE_KEY + "\": \"" + ENTITY1_SENTIMENT_TYPE_STRING + "\",\"" + JSONConstants.SENTIMENT_MIXED_KEY + "\":" + ENTITY1_SENTIMENT_MIXED + "}}," +
           "{\"" + JSONConstants.RANKED_KEYWORDS_TEXT_KEY + "\": \"" + ENTITY2_KEYWORD + "\",\"" + JSONConstants.RANKED_KEYWORDS_SCORE_KEY + "\": " + ENTITY2_SCORE + "," +
           "\"" + JSONConstants.SENTIMENT_KEY + "\": {\"" + JSONConstants.SENTIMENT_TYPE_KEY + "\": \"" + ENTITY2_SENTIMENT_TYPE_STRING + "\",\"" + JSONConstants.SENTIMENT_SCORE_KEY + "\": " + ENTITY2_SENTIMENT_SCORE + "}}," +
           "{\"" + JSONConstants.RANKED_KEYWORDS_TEXT_KEY + "\": \"" + ENTITY3_KEYWORD + "\",\"" + JSONConstants.RANKED_KEYWORDS_SCORE_KEY + "\": " + ENTITY3_SCORE + "}" +
           "]}";
  }

  /**
   * JSON with 1 keyword, no text value.
   */
  private String getJsonString_KeywordNoText() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"," +
           "\"" + JSONConstants.RANKED_KEYWORDS + "\": [" +
           "{\"" + JSONConstants.RANKED_KEYWORDS_SCORE_KEY + "\": " + ENTITY0_SCORE + "," +
           "\"" + JSONConstants.SENTIMENT_KEY + "\": {\"" + JSONConstants.SENTIMENT_TYPE_KEY + "\": \"" + ENTITY0_SENTIMENT_TYPE_STRING + "\"}}" +
           "]}";
  }

  /**
   * JSON with 1 keyword, no relevance value.
   */
  private String getJsonString_KeywordNoScore() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"," +
           "\"" + JSONConstants.RANKED_KEYWORDS + "\": [" +
           "{\"" + JSONConstants.RANKED_KEYWORDS_TEXT_KEY + "\": \"" + ENTITY0_KEYWORD + "\"," +
           "\"" + JSONConstants.SENTIMENT_KEY + "\": {\"" + JSONConstants.SENTIMENT_TYPE_KEY + "\": \"" + ENTITY0_SENTIMENT_TYPE_STRING + "\"}}" +
           "]}";
  }

  /**
   * JSON with 1 keyword, no sentiment.
   */
  private String getJsonString_KeywordNoSentiment() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"," +
           "\"" + JSONConstants.RANKED_KEYWORDS + "\": [" +
           "{\"" + JSONConstants.RANKED_KEYWORDS_TEXT_KEY + "\": \"" + ENTITY0_KEYWORD + "\",\"" + JSONConstants.RANKED_KEYWORDS_SCORE_KEY + "\": " + ENTITY0_SCORE + "}" +
           "]}";
  }

  /**
   * JSON with no keywords.
   */
  private String getJsonString_NoKeywords() {
    return "{\"" + JSONConstants.RESULTS_STATUS + "\":\"" + STATUS_STRING + "\"," +
           "\"" + JSONConstants.RESULTS_USAGE + "\": \"" + USAGE + "\"," +
           "\"" + JSONConstants.RESULTS_URL + "\": \"" + URL + "\"," +
           "\"" + JSONConstants.RESULTS_LANGUAGE + "\": \"" + LANGUAGE + "\"," +
           "\"" + JSONConstants.RESULTS_TEXT + "\": \"" + TEXT + "\"}";
  }
}
